{"backend_state":"running","connection_file":"/projects/7a0d9dc4-a729-4511-b795-d6d235d03b6d/.local/share/jupyter/runtime/kernel-4e818ad4-c5c5-437f-8f4a-93dfd448db0b.json","kernel":"nlp_env","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"end":1654921626260,"exec_count":142,"id":"4fe7e4","input":"import pandas\nfrom sklearn.preprocessing import LabelEncoder","kernel":"nlp_env","pos":0,"start":1654921626252,"state":"done","type":"cell"}
{"end":1654921626361,"exec_count":144,"id":"7be560","input":"instructor_dataset = instructor_dataset[['firstname', 'average']]\ninstructor_dataset","kernel":"nlp_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>firstname</th>\n      <th>average</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Siqi</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ian</td>\n      <td>4.071429</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Debapratim</td>\n      <td>4.115385</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Jason</td>\n      <td>4.136364</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Siyun</td>\n      <td>4.148148</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Vishnu</td>\n      <td>4.153846</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Ethan</td>\n      <td>4.160000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Anthony</td>\n      <td>4.208333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Doris</td>\n      <td>4.214286</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Srinivasa</td>\n      <td>4.222222</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Ritum</td>\n      <td>4.227273</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Nathan</td>\n      <td>4.250000</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Phakawat</td>\n      <td>4.347826</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Chase</td>\n      <td>4.347826</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Katie</td>\n      <td>4.384615</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Katherine</td>\n      <td>4.388889</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Joshua</td>\n      <td>4.411765</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Hyrum</td>\n      <td>4.444444</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Zhuoyu</td>\n      <td>4.454545</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Harsh</td>\n      <td>4.461538</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Noah</td>\n      <td>4.466667</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Graham</td>\n      <td>4.583333</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Jinxuan</td>\n      <td>4.631579</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Alex</td>\n      <td>4.700000</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Raj</td>\n      <td>4.700000</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Eric</td>\n      <td>4.761905</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Uzair</td>\n      <td>4.866667</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Blake</td>\n      <td>4.875000</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Dhruva</td>\n      <td>4.913043</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Emma</td>\n      <td>4.944444</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     firstname   average\n0         Siqi  4.000000\n1          Ian  4.071429\n2   Debapratim  4.115385\n3        Jason  4.136364\n4        Siyun  4.148148\n5       Vishnu  4.153846\n6        Ethan  4.160000\n7      Anthony  4.208333\n8        Doris  4.214286\n9    Srinivasa  4.222222\n10       Ritum  4.227273\n11      Nathan  4.250000\n12    Phakawat  4.347826\n13       Chase  4.347826\n14       Katie  4.384615\n15   Katherine  4.388889\n16      Joshua  4.411765\n17       Hyrum  4.444444\n18      Zhuoyu  4.454545\n19       Harsh  4.461538\n20        Noah  4.466667\n21      Graham  4.583333\n22     Jinxuan  4.631579\n23        Alex  4.700000\n24         Raj  4.700000\n25        Eric  4.761905\n26       Uzair  4.866667\n27       Blake  4.875000\n28      Dhruva  4.913043\n29        Emma  4.944444"},"exec_count":144}},"pos":1.25,"start":1654921626344,"state":"done","type":"cell"}
{"end":1654921626410,"exec_count":145,"id":"861bbb","input":"student_dataset = student_dataset.groupby('firstname').mean()\n\ninstructor_dataset = instructor_dataset.join(student_dataset, on = 'firstname')\n\ninstructor_dataset = instructor_dataset.dropna(0, 'any')\n\ninstructor_dataset","kernel":"nlp_env","output":{"0":{"name":"stderr","text":"/tmp/ipykernel_9291/338292409.py:5: FutureWarning: In a future version of pandas all arguments of DataFrame.dropna will be keyword-only.\n  instructor_dataset = instructor_dataset.dropna(0, 'any')\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>firstname</th>\n      <th>average</th>\n      <th>skillcategory</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Siqi</td>\n      <td>4.000000</td>\n      <td>1.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ian</td>\n      <td>4.071429</td>\n      <td>2.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Debapratim</td>\n      <td>4.115385</td>\n      <td>1.500000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Siyun</td>\n      <td>4.148148</td>\n      <td>1.200000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Vishnu</td>\n      <td>4.153846</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Ethan</td>\n      <td>4.160000</td>\n      <td>1.166667</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Anthony</td>\n      <td>4.208333</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Doris</td>\n      <td>4.214286</td>\n      <td>2.333333</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Srinivasa</td>\n      <td>4.222222</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Ritum</td>\n      <td>4.227273</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Nathan</td>\n      <td>4.250000</td>\n      <td>2.500000</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Phakawat</td>\n      <td>4.347826</td>\n      <td>1.666667</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Chase</td>\n      <td>4.347826</td>\n      <td>1.400000</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Katherine</td>\n      <td>4.388889</td>\n      <td>0.166667</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Hyrum</td>\n      <td>4.444444</td>\n      <td>1.333333</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Zhuoyu</td>\n      <td>4.454545</td>\n      <td>1.833333</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Harsh</td>\n      <td>4.461538</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Noah</td>\n      <td>4.466667</td>\n      <td>1.800000</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Graham</td>\n      <td>4.583333</td>\n      <td>1.333333</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Jinxuan</td>\n      <td>4.631579</td>\n      <td>1.333333</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Alex</td>\n      <td>4.700000</td>\n      <td>2.333333</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Raj</td>\n      <td>4.700000</td>\n      <td>1.333333</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Eric</td>\n      <td>4.761905</td>\n      <td>0.200000</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Uzair</td>\n      <td>4.866667</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Blake</td>\n      <td>4.875000</td>\n      <td>2.500000</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Dhruva</td>\n      <td>4.913043</td>\n      <td>1.666667</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Emma</td>\n      <td>4.944444</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     firstname   average  skillcategory\n0         Siqi  4.000000       1.500000\n1          Ian  4.071429       2.333333\n2   Debapratim  4.115385       1.500000\n4        Siyun  4.148148       1.200000\n5       Vishnu  4.153846       0.000000\n6        Ethan  4.160000       1.166667\n7      Anthony  4.208333       0.000000\n8        Doris  4.214286       2.333333\n9    Srinivasa  4.222222       0.000000\n10       Ritum  4.227273       0.000000\n11      Nathan  4.250000       2.500000\n12    Phakawat  4.347826       1.666667\n13       Chase  4.347826       1.400000\n15   Katherine  4.388889       0.166667\n17       Hyrum  4.444444       1.333333\n18      Zhuoyu  4.454545       1.833333\n19       Harsh  4.461538       0.000000\n20        Noah  4.466667       1.800000\n21      Graham  4.583333       1.333333\n22     Jinxuan  4.631579       1.333333\n23        Alex  4.700000       2.333333\n24         Raj  4.700000       1.333333\n25        Eric  4.761905       0.200000\n26       Uzair  4.866667       1.000000\n27       Blake  4.875000       2.500000\n28      Dhruva  4.913043       1.666667\n29        Emma  4.944444       0.000000"},"exec_count":145}},"pos":1.5,"start":1654921626391,"state":"done","type":"cell"}
{"end":1654921626424,"exec_count":146,"id":"9b2800","input":"from scipy.stats import pearsonr\n\nprint(pearsonr(instructor_dataset['average'], instructor_dataset['skillcategory']))","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"(0.021486417888279898, 0.9152842514078476)\n"}},"pos":1.75,"start":1654921626415,"state":"done","type":"cell"}
{"exec_count":143,"id":"1c60ab","input":"instructor_dataset = pandas.read_csv('instructor_data.csv')\n\nstudent_dataset = pandas.read_csv('student_data.csv')\nstudent_dataset.columns = [i for i in range(student_dataset.shape[1])]\n\nstudent_dataset[7] = student_dataset[7].map(\n    \n    {\"I have never coded before! (that's TOTALLY ok :) )\" : 0,\n     'I have some basic programming experience, I know how to add things together and print data' : 1,\n     \"I've been coding for a bit, I can use for loops and if-statements\" : 2,\n     'I am an experienced coder, I know how to write and use functions, external packages, and more' : 3,\n     'From a teacher or school administrator' : 1,\n     \"I have some basic programming experience, I know how to add things together and print data, I've been coding for a bit, I can use for loops and if-statements\" : 1,\n     \"I've been coding for a bit, I can use for loops and if-statements, I am an experienced coder, I know how to write and use functions, external packages, and more\": 2,\n     \"I have some basic programming experience, I know how to add things together and print data, I've been coding for a bit, I can use for loops and if-statements, I am an experienced coder, I know how to write and use functions, external packages, and more\": 1,\n     \"I have never coded before! (that's TOTALLY ok :) ), I have some basic programming experience, I know how to add things together and print data\": 0,\n     \"I have never coded before! (that's TOTALLY ok :) ), I have some basic programming experience, I know how to add things together and print data, I've been coding for a bit, I can use for loops and if-statements\" : 0\n    }\n    \n)\nstudent_dataset = student_dataset[[0, 7]]\nstudent_dataset = student_dataset[(student_dataset[7] == 0) | (student_dataset[7] == 1) | (student_dataset[7] == 2) | (student_dataset[7] == 3)]\n\nstudent_dataset[0] = student_dataset[0].map(lambda name: name.split(\" \")[0].capitalize())\nstudent_dataset.columns = ['firstname', 'skillcategory']\n\nstudent_dataset","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[\"I have never coded before! (that's TOTALLY ok :) )\"\n 'I have some basic programming experience, I know how to add things together and print data'\n \"I've been coding for a bit, I can use for loops and if-statements\"\n 'I am an experienced coder, I know how to write and use functions, external packages, and more'\n \"I have some basic programming experience, I know how to add things together and print data, I've been coding for a bit, I can use for loops and if-statements\"\n \"I've been coding for a bit, I can use for loops and if-statements, I am an experienced coder, I know how to write and use functions, external packages, and more\"\n \"I have some basic programming experience, I know how to add things together and print data, I've been coding for a bit, I can use for loops and if-statements, I am an experienced coder, I know how to write and use functions, external packages, and more\"\n \"I have never coded before! (that's TOTALLY ok :) ), I have some basic programming experience, I know how to add things together and print data\"\n nan\n \"I have never coded before! (that's TOTALLY ok :) ), I have some basic programming experience, I know how to add things together and print data, I've been coding for a bit, I can use for loops and if-statements\"\n 'From a teacher or school administrator']\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>firstname</th>\n      <th>skillcategory</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Eric</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Eric</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Eric</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Eric</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Eric</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>Riya</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>Riya</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>Riya</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>Riya</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>201</th>\n      <td>Riya</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>196 rows × 2 columns</p>\n</div>","text/plain":"    firstname  skillcategory\n0        Eric            0.0\n1        Eric            0.0\n2        Eric            0.0\n3        Eric            1.0\n4        Eric            0.0\n..        ...            ...\n197      Riya            1.0\n198      Riya            0.0\n199      Riya            1.0\n200      Riya            3.0\n201      Riya            1.0\n\n[196 rows x 2 columns]"},"exec_count":143}},"pos":1,"state":"done","type":"cell"}
{"id":"59303a","input":"","pos":2,"type":"cell"}
{"id":0,"time":1654919599077,"type":"user"}
{"last_load":1654916274649,"type":"file"}